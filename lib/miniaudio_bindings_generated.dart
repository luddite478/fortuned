// Generated bindings for miniaudio.
// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: comment_references
// ignore_for_file: file_names
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: prefer_single_quotes
// ignore_for_file: type_literal_in_constant_pattern
// ignore_for_file: unnecessary_import

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class MiniaudioBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MiniaudioBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MiniaudioBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Initialize the miniaudio engine
  int miniaudio_init() {
    return _miniaudio_init();
  }

  late final _miniaudio_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('miniaudio_init');
  late final _miniaudio_init = _miniaudio_initPtr.asFunction<int Function()>();

  /// Play a sound from a file
  int miniaudio_play_sound(
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _miniaudio_play_sound(
      file_path,
    );
  }

  late final _miniaudio_play_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'miniaudio_play_sound');
  late final _miniaudio_play_sound = _miniaudio_play_soundPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Load a sound into memory
  int miniaudio_load_sound(
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _miniaudio_load_sound(
      file_path,
    );
  }

  late final _miniaudio_load_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'miniaudio_load_sound');
  late final _miniaudio_load_sound = _miniaudio_load_soundPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Play a previously loaded sound
  int miniaudio_play_loaded_sound() {
    return _miniaudio_play_loaded_sound();
  }

  late final _miniaudio_play_loaded_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_play_loaded_sound');
  late final _miniaudio_play_loaded_sound =
      _miniaudio_play_loaded_soundPtr.asFunction<int Function()>();

  /// Stop all currently playing sounds
  void miniaudio_stop_all_sounds() {
    return _miniaudio_stop_all_sounds();
  }

  late final _miniaudio_stop_all_soundsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'miniaudio_stop_all_sounds');
  late final _miniaudio_stop_all_sounds =
      _miniaudio_stop_all_soundsPtr.asFunction<void Function()>();

  /// Check if engine is initialized
  int miniaudio_is_initialized() {
    return _miniaudio_is_initialized();
  }

  late final _miniaudio_is_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_is_initialized');
  late final _miniaudio_is_initialized =
      _miniaudio_is_initializedPtr.asFunction<int Function()>();

  /// Get current audio route info (for debugging Bluetooth connectivity)
  void miniaudio_log_audio_route() {
    return _miniaudio_log_audio_route();
  }

  late final _miniaudio_log_audio_routePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'miniaudio_log_audio_route');
  late final _miniaudio_log_audio_route =
      _miniaudio_log_audio_routePtr.asFunction<void Function()>();

  /// Manually reconfigure audio session (for testing)
  int miniaudio_reconfigure_audio_session() {
    return _miniaudio_reconfigure_audio_session();
  }

  late final _miniaudio_reconfigure_audio_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_reconfigure_audio_session');
  late final _miniaudio_reconfigure_audio_session =
      _miniaudio_reconfigure_audio_sessionPtr.asFunction<int Function()>();

  /// Cleanup the miniaudio engine
  void miniaudio_cleanup() {
    return _miniaudio_cleanup();
  }

  late final _miniaudio_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('miniaudio_cleanup');
  late final _miniaudio_cleanup =
      _miniaudio_cleanupPtr.asFunction<void Function()>();

  /// Returns the number of available playback slots (always MINIAUDIO_MAX_SLOTS)
  int miniaudio_get_slot_count() {
    return _miniaudio_get_slot_count();
  }

  late final _miniaudio_get_slot_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_get_slot_count');
  late final _miniaudio_get_slot_count =
      _miniaudio_get_slot_countPtr.asFunction<int Function()>();

  /// Loads a sound into the given slot. When loadToMemory == 1 the file will be
  /// fully decoded into memory for lowest-latency playback. When 0 the file will
  /// be streamed from disk.
  int miniaudio_load_sound_to_slot(
    int slot,
    ffi.Pointer<ffi.Char> file_path,
    int loadToMemory,
  ) {
    return _miniaudio_load_sound_to_slot(
      slot,
      file_path,
      loadToMemory,
    );
  }

  late final _miniaudio_load_sound_to_slotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('miniaudio_load_sound_to_slot');
  late final _miniaudio_load_sound_to_slot = _miniaudio_load_sound_to_slotPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  /// Returns 1 if the slot successfully has a sound loaded, 0 otherwise.
  int miniaudio_is_slot_loaded(
    int slot,
  ) {
    return _miniaudio_is_slot_loaded(
      slot,
    );
  }

  late final _miniaudio_is_slot_loadedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'miniaudio_is_slot_loaded');
  late final _miniaudio_is_slot_loaded =
      _miniaudio_is_slot_loadedPtr.asFunction<int Function(int)>();

  /// Starts playback of the sound in the given slot. The sound is mixed together
  /// with any other playing slots.
  int miniaudio_play_slot(
    int slot,
  ) {
    return _miniaudio_play_slot(
      slot,
    );
  }

  late final _miniaudio_play_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'miniaudio_play_slot');
  late final _miniaudio_play_slot =
      _miniaudio_play_slotPtr.asFunction<int Function(int)>();

  /// Stops playback of the sound in the given slot.
  void miniaudio_stop_slot(
    int slot,
  ) {
    return _miniaudio_stop_slot(
      slot,
    );
  }

  late final _miniaudio_stop_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'miniaudio_stop_slot');
  late final _miniaudio_stop_slot =
      _miniaudio_stop_slotPtr.asFunction<void Function(int)>();

  /// Unloads the sound from the given slot and frees all associated memory.
  void miniaudio_unload_slot(
    int slot,
  ) {
    return _miniaudio_unload_slot(
      slot,
    );
  }

  late final _miniaudio_unload_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'miniaudio_unload_slot');
  late final _miniaudio_unload_slot =
      _miniaudio_unload_slotPtr.asFunction<void Function(int)>();

  /// Memory usage tracking functions
  int miniaudio_get_total_memory_usage() {
    return _miniaudio_get_total_memory_usage();
  }

  late final _miniaudio_get_total_memory_usagePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'miniaudio_get_total_memory_usage');
  late final _miniaudio_get_total_memory_usage =
      _miniaudio_get_total_memory_usagePtr.asFunction<int Function()>();

  int miniaudio_get_slot_memory_usage(
    int slot,
  ) {
    return _miniaudio_get_slot_memory_usage(
      slot,
    );
  }

  late final _miniaudio_get_slot_memory_usagePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Int)>>(
          'miniaudio_get_slot_memory_usage');
  late final _miniaudio_get_slot_memory_usage =
      _miniaudio_get_slot_memory_usagePtr.asFunction<int Function(int)>();

  int miniaudio_get_memory_slot_count() {
    return _miniaudio_get_memory_slot_count();
  }

  late final _miniaudio_get_memory_slot_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_get_memory_slot_count');
  late final _miniaudio_get_memory_slot_count =
      _miniaudio_get_memory_slot_countPtr.asFunction<int Function()>();

  /// Output recording/rendering functions (captures mixed grid output to WAV file)
  int miniaudio_start_output_recording(
    ffi.Pointer<ffi.Char> output_file_path,
  ) {
    return _miniaudio_start_output_recording(
      output_file_path,
    );
  }

  late final _miniaudio_start_output_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'miniaudio_start_output_recording');
  late final _miniaudio_start_output_recording =
      _miniaudio_start_output_recordingPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int miniaudio_stop_output_recording() {
    return _miniaudio_stop_output_recording();
  }

  late final _miniaudio_stop_output_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_stop_output_recording');
  late final _miniaudio_stop_output_recording =
      _miniaudio_stop_output_recordingPtr.asFunction<int Function()>();

  int miniaudio_is_output_recording() {
    return _miniaudio_is_output_recording();
  }

  late final _miniaudio_is_output_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'miniaudio_is_output_recording');
  late final _miniaudio_is_output_recording =
      _miniaudio_is_output_recordingPtr.asFunction<int Function()>();

  int miniaudio_get_recording_duration_ms() {
    return _miniaudio_get_recording_duration_ms();
  }

  late final _miniaudio_get_recording_duration_msPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'miniaudio_get_recording_duration_ms');
  late final _miniaudio_get_recording_duration_ms =
      _miniaudio_get_recording_duration_msPtr.asFunction<int Function()>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int MINIAUDIO_MAX_SLOTS = 8;
