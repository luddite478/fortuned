// Generated bindings for miniaudio.
// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: comment_references
// ignore_for_file: file_names
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: prefer_single_quotes
// ignore_for_file: type_literal_in_constant_pattern
// ignore_for_file: unnecessary_import

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class MiniaudioBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MiniaudioBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MiniaudioBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// Simple counter function to replace the Flutter increment logic
  int increment_counter(int current_value) {
    return _increment_counter(current_value);
  }

  late final _increment_counterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'increment_counter',
      );
  late final _increment_counter = _increment_counterPtr
      .asFunction<int Function(int)>();

  /// Initialize function (placeholder for future miniaudio integration)
  void miniaudio_init() {
    return _miniaudio_init();
  }

  late final _miniaudio_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('miniaudio_init');
  late final _miniaudio_init = _miniaudio_initPtr.asFunction<void Function()>();

  /// Cleanup function (placeholder for future miniaudio integration)
  void miniaudio_cleanup() {
    return _miniaudio_cleanup();
  }

  late final _miniaudio_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('miniaudio_cleanup');
  late final _miniaudio_cleanup = _miniaudio_cleanupPtr
      .asFunction<void Function()>();
}
