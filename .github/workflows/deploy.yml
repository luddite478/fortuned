name: Reusable Deploy Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      branch:
        description: 'Branch to deploy'
        required: true
        type: string

env:
  REPO_DIR_PATH: /home/luddite478/fortuned

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    name: Deploy to ${{ inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sync latest changes on ${{ inputs.environment }} server
        uses: appleboy/ssh-action@v1.1.0
        env:
          REPO_DIR_PATH: ${{ env.REPO_DIR_PATH }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: REPO_DIR_PATH
          script: |
            cd "$REPO_DIR_PATH"
            git config --global --add safe.directory "$REPO_DIR_PATH"
            git fetch origin
            git checkout ${{ inputs.branch }}
            git pull origin ${{ inputs.branch }}

      - name: Restart Docker Compose on ${{ inputs.environment }} server
        uses: appleboy/ssh-action@v1.1.0
        env:
          REPO_DIR_PATH: ${{ env.REPO_DIR_PATH }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          envs: REPO_DIR_PATH
          script: |
            cd "$REPO_DIR_PATH"
            set -a
            source nginx/.env
            set +a
            export TAILSCALE_IP="$(tailscale ip --4)"
            docker-compose -f docker-compose.envsubst.yaml down -v
            rm docker-compose.envsubst.yaml || true
            envsubst < docker-compose.yaml > docker-compose.envsubst.yaml
            docker-compose -f docker-compose.envsubst.yaml up -d --build --force-recreate

      - name: Wait for ${{ inputs.environment }} server
        timeout-minutes: 3
        run: |
          echo "Waiting for ${{ inputs.environment }} server..."
          timeout=180
          while ! curl -s http://${{ secrets.SERVER_HOST }}:${{ secrets.HTTPS_API_PORT }}/get_sound_series > /dev/null; do
            sleep 1
            timeout=$((timeout-1))
            if [ "$timeout" -le 0 ]; then
              echo "Timed out waiting for server to respond."
              exit 1
            fi
          done
          echo "${{ inputs.environment }} server is up." 
