name: Reusable Deploy Secrets Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy secrets to'
        required: true
        type: string
      restart-containers:
        description: 'Restarting containers to reload secrets'
        required: false
        default: 'true'
        type: string
      vm_host_address:
        description: 'IP or domain of the VM'
        required: false
        default: ""
        type: string

env:
  REPO_DIR_PATH: /home/luddite478/niyya

jobs:
  deploy-secrets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [server,mongodb,nginx]
    environment: ${{ inputs.environment }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

    - name: Read and Substitute Environment Variables
      run: |
        pwd
        ls -la ${{ matrix.component }}
        # Read the example env file and substitute values
        echo '${{ toJSON(secrets) }}' > secrets.json
        cat secrets.json

        echo "Reading and substituting environment variables..."
        cat ${{ matrix.component }}/.example.env

        while IFS='=' read -r key value || [ -n "$key" ]; do
          # Remove leading and trailing spaces
          key=$(echo $key | xargs)
          
          # Check if the key is not empty and doesn't start with a comment
          if [[ ! -z "$key" && ! $key =~ ^# ]]; then
            # Get the corresponding secret value from the JSON file
            secret_value=$(jq -r --arg key "$key" '.[$key]' secrets.json)
            
            # Debug output
            echo "Processing key: $key"
            echo "Original value: $value"
            echo "Secret value: $secret_value"
            
            # If the secret exists, substitute it in the .env file
            if [[ ! -z "$secret_value" && "$secret_value" != "null" ]]; then
              echo "$key=$secret_value" >> ${{ matrix.component }}/.env
            else
              echo "$key=$value" >> ${{ matrix.component }}/.env
            fi
          fi
        done < ${{ matrix.component }}/.example.env

        echo "Resulting .env file:"
        cat ${{ matrix.component }}/.env

    - name: Upload .env to server
      run: |
        SERVER_HOST=${{ inputs.vm_host_address || secrets.SERVER_HOST }}
        scp -o StrictHostKeyChecking=no ${{ matrix.component }}/.env ${{ secrets.SSH_USER }}@$SERVER_HOST:${{ env.REPO_DIR_PATH }}/${{ matrix.component }}/.env

  restart-containers:
    runs-on: ubuntu-latest
    needs: deploy-secrets
    if: inputs.restart-containers == 'true'
    environment: ${{ inputs.environment }}
    steps:
    - name: Stop and rerun Docker Compose
      uses: appleboy/ssh-action@v1.1.0
      env:
        REPO_DIR_PATH: ${{ env.REPO_DIR_PATH }}
      with:
        host: ${{ inputs.vm_host_address || secrets.SERVER_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        port: 22
        envs: REPO_DIR_PATH
        script: |
          cd "$REPO_DIR_PATH"
          docker-compose -f docker-compose.envsubst.yaml down
          rm docker-compose.envsubst.yaml || true
          export TAILSCALE_IP="$(tailscale ip --4)"
          envsubst < docker-compose.yaml > docker-compose.envsubst.yaml
          docker-compose -f docker-compose.envsubst.yaml up -d --build --force-recreate
          