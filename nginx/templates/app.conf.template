log_format upstream_log '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                        '$request_time $upstream_response_time $upstream_addr $upstream_status';

server {
    listen ${HTTP_API_PORT};
    listen [::]:${HTTP_API_PORT};
    
    server_name ${SERVER_HOST};
    server_tokens off;

    access_log /var/log/nginx/access.log upstream_log;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    location / {
        return 200 "Certificate test server - HTTP working\n";
        add_header Content-Type text/plain;
    }
}

server {
    listen ${HTTPS_API_PORT} ssl http2;
    listen [::]:${HTTPS_API_PORT} ssl http2;
    
    server_name ${SERVER_HOST};
    server_tokens off;

    access_log /var/log/nginx/access.log upstream_log;

    ssl_certificate /etc/letsencrypt/live/${SERVER_HOST}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_HOST}/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    location / {
        return 200 "Certificate test server - HTTPS working with Let's Encrypt certificate!\n";
        add_header Content-Type text/plain;
    }
}

server {
    listen ${WEBSOCKET_PORT} ssl http2;
    listen [::]:${WEBSOCKET_PORT} ssl http2;

    access_log /var/log/nginx/access.log upstream_log;
    
    server_name ${SERVER_HOST};
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/${SERVER_HOST}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_HOST}/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    location / {
        return 200 "WebSocket endpoint - HTTPS working!\n";
        add_header Content-Type text/plain;
    }
}