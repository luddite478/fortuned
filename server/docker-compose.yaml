version: '3'

services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8888:8888"  # HTTP API port (only accessible from localhost)
      - "127.0.0.1:8765:8765"  # WebSocket port (only accessible from localhost)
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - mongodb
    restart: on-failure

  haproxy:
    image: haproxy:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./certs:/usr/local/etc/haproxy/certs:ro
    depends_on:
      - server
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - ./certs:/certs
      - ./letsencrypt:/etc/letsencrypt
    entrypoint: ""
    command: >
      sh -c "
        if [ ! -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then
          certbot certonly --standalone --agree-tos --register-unsafely-without-email
          -d $${DOMAIN} --non-interactive --staging &&
          cat /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem
              /etc/letsencrypt/live/$${DOMAIN}/privkey.pem
              > /certs/haproxy.pem
        else
          echo 'Certificate already exists'
        fi
      "
    ports:
      - "8081:80"  # Required only temporarily for Let's Encrypt challenge
    environment:
      - DOMAIN=${DOMAIN}
    profiles:
      - cert-generation  # This service only runs when explicitly called

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: test
      MONGO_INITDB_DATABASE: admin
    ports:
      - ${TAILSCALE_IP}:27017:27017
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    restart: on-failure
    command: mongod --auth

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local 