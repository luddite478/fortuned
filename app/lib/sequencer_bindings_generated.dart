// Generated bindings for sequencer.
// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: comment_references
// ignore_for_file: file_names
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: prefer_single_quotes
// ignore_for_file: type_literal_in_constant_pattern
// ignore_for_file: unnecessary_import

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class SequencerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SequencerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SequencerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Initialize the audio engine
  int init() {
    return _init();
  }

  late final _initPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('init');
  late final _init = _initPtr.asFunction<int Function()>();

  /// Play a sound from a file
  int play_sound(
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _play_sound(
      file_path,
    );
  }

  late final _play_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'play_sound');
  late final _play_sound =
      _play_soundPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Load a sound into memory
  int load_sound(
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _load_sound(
      file_path,
    );
  }

  late final _load_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'load_sound');
  late final _load_sound =
      _load_soundPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Play a previously loaded sound
  int play_loaded_sound() {
    return _play_loaded_sound();
  }

  late final _play_loaded_soundPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('play_loaded_sound');
  late final _play_loaded_sound =
      _play_loaded_soundPtr.asFunction<int Function()>();

  /// Stop all currently playing sounds
  void stop_all_sounds() {
    return _stop_all_sounds();
  }

  late final _stop_all_soundsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stop_all_sounds');
  late final _stop_all_sounds =
      _stop_all_soundsPtr.asFunction<void Function()>();

  /// Check if engine is initialized
  int is_initialized() {
    return _is_initialized();
  }

  late final _is_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('is_initialized');
  late final _is_initialized = _is_initializedPtr.asFunction<int Function()>();

  /// Get current audio route info (for debugging Bluetooth connectivity)
  void log_route() {
    return _log_route();
  }

  late final _log_routePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('log_route');
  late final _log_route = _log_routePtr.asFunction<void Function()>();

  /// Manually reconfigure audio session (for testing)
  int reconfigure_audio_session() {
    return _reconfigure_audio_session();
  }

  late final _reconfigure_audio_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'reconfigure_audio_session');
  late final _reconfigure_audio_session =
      _reconfigure_audio_sessionPtr.asFunction<int Function()>();

  /// Cleanup the audio engine
  void cleanup() {
    return _cleanup();
  }

  late final _cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('cleanup');
  late final _cleanup = _cleanupPtr.asFunction<void Function()>();

  /// Sequencer functions (sample-accurate timing)
  int start(
    int bpm,
    int steps,
  ) {
    return _start(
      bpm,
      steps,
    );
  }

  late final _startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('start');
  late final _start = _startPtr.asFunction<int Function(int, int)>();

  void stop() {
    return _stop();
  }

  late final _stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stop');
  late final _stop = _stopPtr.asFunction<void Function()>();

  int is_playing() {
    return _is_playing();
  }

  late final _is_playingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('is_playing');
  late final _is_playing = _is_playingPtr.asFunction<int Function()>();

  int get_current_step() {
    return _get_current_step();
  }

  late final _get_current_stepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_current_step');
  late final _get_current_step =
      _get_current_stepPtr.asFunction<int Function()>();

  void set_bpm(
    int bpm,
  ) {
    return _set_bpm(
      bpm,
    );
  }

  late final _set_bpmPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('set_bpm');
  late final _set_bpm = _set_bpmPtr.asFunction<void Function(int)>();

  void set_cell(
    int step,
    int column,
    int sample_slot,
  ) {
    return _set_cell(
      step,
      column,
      sample_slot,
    );
  }

  late final _set_cellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'set_cell');
  late final _set_cell =
      _set_cellPtr.asFunction<void Function(int, int, int)>();

  void clear_cell(
    int step,
    int column,
  ) {
    return _clear_cell(
      step,
      column,
    );
  }

  late final _clear_cellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'clear_cell');
  late final _clear_cell = _clear_cellPtr.asFunction<void Function(int, int)>();

  void clear_all_cells() {
    return _clear_all_cells();
  }

  late final _clear_all_cellsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('clear_all_cells');
  late final _clear_all_cells =
      _clear_all_cellsPtr.asFunction<void Function()>();

  /// Multi-grid sequencer support
  void set_columns(
    int columns,
  ) {
    return _set_columns(
      columns,
    );
  }

  late final _set_columnsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('set_columns');
  late final _set_columns = _set_columnsPtr.asFunction<void Function(int)>();

  /// Returns the number of available playback slots (always MAX_SLOTS)
  int get_slot_count() {
    return _get_slot_count();
  }

  late final _get_slot_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_slot_count');
  late final _get_slot_count = _get_slot_countPtr.asFunction<int Function()>();

  /// Loads a sound into the given slot. When loadToMemory == 1 the file will be
  /// fully decoded into memory for lowest-latency playback. When 0 the file will
  /// be streamed from disk.
  int load_sound_to_slot(
    int slot,
    ffi.Pointer<ffi.Char> file_path,
    int loadToMemory,
  ) {
    return _load_sound_to_slot(
      slot,
      file_path,
      loadToMemory,
    );
  }

  late final _load_sound_to_slotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('load_sound_to_slot');
  late final _load_sound_to_slot = _load_sound_to_slotPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  /// Returns 1 if the slot successfully has a sound loaded, 0 otherwise.
  int is_slot_loaded(
    int slot,
  ) {
    return _is_slot_loaded(
      slot,
    );
  }

  late final _is_slot_loadedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('is_slot_loaded');
  late final _is_slot_loaded =
      _is_slot_loadedPtr.asFunction<int Function(int)>();

  /// Starts playback of the sound in the given slot. The sound is mixed together
  /// with any other playing slots.
  int play_slot(
    int slot,
  ) {
    return _play_slot(
      slot,
    );
  }

  late final _play_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('play_slot');
  late final _play_slot = _play_slotPtr.asFunction<int Function(int)>();

  /// Stops playback of the sound in the given slot.
  void stop_slot(
    int slot,
  ) {
    return _stop_slot(
      slot,
    );
  }

  late final _stop_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('stop_slot');
  late final _stop_slot = _stop_slotPtr.asFunction<void Function(int)>();

  /// Unloads the sound from the given slot and frees all associated memory.
  void unload_slot(
    int slot,
  ) {
    return _unload_slot(
      slot,
    );
  }

  late final _unload_slotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('unload_slot');
  late final _unload_slot = _unload_slotPtr.asFunction<void Function(int)>();

  /// Memory usage tracking functions
  int get_total_memory_usage() {
    return _get_total_memory_usage();
  }

  late final _get_total_memory_usagePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'get_total_memory_usage');
  late final _get_total_memory_usage =
      _get_total_memory_usagePtr.asFunction<int Function()>();

  int get_slot_memory_usage(
    int slot,
  ) {
    return _get_slot_memory_usage(
      slot,
    );
  }

  late final _get_slot_memory_usagePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Int)>>(
          'get_slot_memory_usage');
  late final _get_slot_memory_usage =
      _get_slot_memory_usagePtr.asFunction<int Function(int)>();

  int get_memory_slot_count() {
    return _get_memory_slot_count();
  }

  late final _get_memory_slot_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_memory_slot_count');
  late final _get_memory_slot_count =
      _get_memory_slot_countPtr.asFunction<int Function()>();

  /// Memory limit information functions
  int get_max_memory_slots() {
    return _get_max_memory_slots();
  }

  late final _get_max_memory_slotsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_max_memory_slots');
  late final _get_max_memory_slots =
      _get_max_memory_slotsPtr.asFunction<int Function()>();

  int get_max_memory_file_size() {
    return _get_max_memory_file_size();
  }

  late final _get_max_memory_file_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'get_max_memory_file_size');
  late final _get_max_memory_file_size =
      _get_max_memory_file_sizePtr.asFunction<int Function()>();

  int get_max_total_memory_usage() {
    return _get_max_total_memory_usage();
  }

  late final _get_max_total_memory_usagePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'get_max_total_memory_usage');
  late final _get_max_total_memory_usage =
      _get_max_total_memory_usagePtr.asFunction<int Function()>();

  int get_available_memory_capacity() {
    return _get_available_memory_capacity();
  }

  late final _get_available_memory_capacityPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'get_available_memory_capacity');
  late final _get_available_memory_capacity =
      _get_available_memory_capacityPtr.asFunction<int Function()>();

  /// Volume control functions
  int set_sample_bank_volume(
    int bank,
    double volume,
  ) {
    return _set_sample_bank_volume(
      bank,
      volume,
    );
  }

  late final _set_sample_bank_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Float)>>(
          'set_sample_bank_volume');
  late final _set_sample_bank_volume =
      _set_sample_bank_volumePtr.asFunction<int Function(int, double)>();

  double get_sample_bank_volume(
    int bank,
  ) {
    return _get_sample_bank_volume(
      bank,
    );
  }

  late final _get_sample_bank_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>(
          'get_sample_bank_volume');
  late final _get_sample_bank_volume =
      _get_sample_bank_volumePtr.asFunction<double Function(int)>();

  int set_cell_volume(
    int step,
    int column,
    double volume,
  ) {
    return _set_cell_volume(
      step,
      column,
      volume,
    );
  }

  late final _set_cell_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Float)>>(
      'set_cell_volume');
  late final _set_cell_volume =
      _set_cell_volumePtr.asFunction<int Function(int, int, double)>();

  int reset_cell_volume(
    int step,
    int column,
  ) {
    return _reset_cell_volume(
      step,
      column,
    );
  }

  late final _reset_cell_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'reset_cell_volume');
  late final _reset_cell_volume =
      _reset_cell_volumePtr.asFunction<int Function(int, int)>();

  double get_cell_volume(
    int step,
    int column,
  ) {
    return _get_cell_volume(
      step,
      column,
    );
  }

  late final _get_cell_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Int)>>(
          'get_cell_volume');
  late final _get_cell_volume =
      _get_cell_volumePtr.asFunction<double Function(int, int)>();

  /// Pitch control functions
  int set_sample_bank_pitch(
    int bank,
    double pitch,
  ) {
    return _set_sample_bank_pitch(
      bank,
      pitch,
    );
  }

  late final _set_sample_bank_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Float)>>(
          'set_sample_bank_pitch');
  late final _set_sample_bank_pitch =
      _set_sample_bank_pitchPtr.asFunction<int Function(int, double)>();

  double get_sample_bank_pitch(
    int bank,
  ) {
    return _get_sample_bank_pitch(
      bank,
    );
  }

  late final _get_sample_bank_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>(
          'get_sample_bank_pitch');
  late final _get_sample_bank_pitch =
      _get_sample_bank_pitchPtr.asFunction<double Function(int)>();

  int set_cell_pitch(
    int step,
    int column,
    double pitch,
  ) {
    return _set_cell_pitch(
      step,
      column,
      pitch,
    );
  }

  late final _set_cell_pitchPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Float)>>(
      'set_cell_pitch');
  late final _set_cell_pitch =
      _set_cell_pitchPtr.asFunction<int Function(int, int, double)>();

  int reset_cell_pitch(
    int step,
    int column,
  ) {
    return _reset_cell_pitch(
      step,
      column,
    );
  }

  late final _reset_cell_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'reset_cell_pitch');
  late final _reset_cell_pitch =
      _reset_cell_pitchPtr.asFunction<int Function(int, int)>();

  double get_cell_pitch(
    int step,
    int column,
  ) {
    return _get_cell_pitch(
      step,
      column,
    );
  }

  late final _get_cell_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Int)>>(
          'get_cell_pitch');
  late final _get_cell_pitch =
      _get_cell_pitchPtr.asFunction<double Function(int, int)>();

  /// Output recording/rendering functions (captures mixed grid output to WAV file)
  int start_recording(
    ffi.Pointer<ffi.Char> output_file_path,
  ) {
    return _start_recording(
      output_file_path,
    );
  }

  late final _start_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'start_recording');
  late final _start_recording =
      _start_recordingPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int stop_recording() {
    return _stop_recording();
  }

  late final _stop_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('stop_recording');
  late final _stop_recording = _stop_recordingPtr.asFunction<int Function()>();

  int is_recording() {
    return _is_recording();
  }

  late final _is_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('is_recording');
  late final _is_recording = _is_recordingPtr.asFunction<int Function()>();

  int get_recording_duration() {
    return _get_recording_duration();
  }

  late final _get_recording_durationPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>(
          'get_recording_duration');
  late final _get_recording_duration =
      _get_recording_durationPtr.asFunction<int Function()>();

  /// Diagnostic functions for performance monitoring
  int get_active_cell_node_count() {
    return _get_active_cell_node_count();
  }

  late final _get_active_cell_node_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'get_active_cell_node_count');
  late final _get_active_cell_node_count =
      _get_active_cell_node_countPtr.asFunction<int Function()>();

  int get_max_cell_node_count() {
    return _get_max_cell_node_count();
  }

  late final _get_max_cell_node_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'get_max_cell_node_count');
  late final _get_max_cell_node_count =
      _get_max_cell_node_countPtr.asFunction<int Function()>();
}

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  /// for alignment
  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

const int __WORDSIZE = 64;

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int MAX_SLOTS = 1024;
